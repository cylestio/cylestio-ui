name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

env:
  NODE_VERSION: '18.x'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security checks
        run: npm run security:check
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: Create dependency check suppression file if not exists
        run: |
          if [ ! -f ./.dependency-check-suppression.xml ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
            </suppressions>' > ./.dependency-check-suppression.xml
          fi
      
      - name: Run OWASP Dependency-Check without API key
        run: |
          mkdir -p reports
          docker run --rm \
            -v $(pwd):/src \
            -v $(pwd)/reports:/reports \
            owasp/dependency-check:latest \
            --scan /src \
            --format "HTML" \
            --project "cylestio-ui" \
            --out /reports \
            --suppression /src/.dependency-check-suppression.xml \
            --failOnCVSS 7 \
            --noupdate
        continue-on-error: true
      
      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports
        if: always()

  code-quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run TypeScript compiler
        run: npm run type-check
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Build the application
        run: npm run build
      
      - name: Start the application
        run: npm start &
        env:
          PORT: 3000
      
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          timeout 30 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || false
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: e2e-results/
        if: always()

  build:
    name: Build
    needs: [security-checks, code-quality, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/
          retention-days: 7

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next
      
      - name: Deploy
        id: deploy
        run: |
          echo "Deployment would happen here. Configure with your preferred open-source deployment method."
          # Example: Deploy to a self-hosted server via SSH
          # or use platforms with free tiers like Netlify/GitHub Pages 