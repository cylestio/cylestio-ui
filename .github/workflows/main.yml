name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

env:
  NODE_VERSION: '18.x'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit
        continue-on-error: true
      
      - name: Run npm audit-ci
        run: npx audit-ci --high
        continue-on-error: true
        
      - name: Run Retire.js
        run: npx retire --severity high --path ./
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  code-quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npx eslint --max-warnings=0 --no-error-on-unmatched-pattern "app/**/*.{js,jsx,ts,tsx}" "lib/**/*.{js,jsx,ts,tsx}" "components/**/*.{js,jsx,ts,tsx}"
        continue-on-error: true
      
      - name: Run TypeScript compiler
        run: npm run type-check
        continue-on-error: true
      
      - name: Run tests with coverage
        run: npm run test:coverage
        continue-on-error: true
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
        if: always()

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Setup database directory
        run: |
          mkdir -p .db
          touch .db/cylestio.db
          chmod 777 .db/cylestio.db
      
      - name: Build the application
        run: npm run build
        continue-on-error: true
      
      - name: Start the application
        run: npm start &
        env:
          PORT: 3000
          DATABASE_URL: '.db/cylestio.db'
        continue-on-error: true
      
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          timeout 30 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:3000)" != "200" ]]; do sleep 5; done' || true
      
      - name: Run E2E tests
        run: npm run test:e2e
        continue-on-error: true
      
      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: e2e-results/
        if: always()

  build:
    name: Build
    needs: [security-checks]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup database directory
        run: |
          mkdir -p .db
          touch .db/cylestio.db
          chmod 777 .db/cylestio.db
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: '.db/cylestio.db'
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/
          retention-days: 7
        if: always()

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next
      
      - name: Deploy
        id: deploy
        run: |
          echo "Deployment would happen here. Configure with your preferred open-source deployment method."
          # Example: Deploy to a self-hosted server via SSH
          # or use platforms with free tiers like Netlify/GitHub Pages 
        continue-on-error: true 